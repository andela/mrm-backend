#!/usr/bin/env bash

source /home/packer/common-functions.sh

function get_database {
    if [[ $(get_instance_metadata "environment") == "staging" ]]; then
        gcloud sql databases list --instance=converge-postgres | grep staging
    elif [[ $(get_instance_metadata "environment") == "sandbox" ]]; then
        gcloud sql databases list --instance=converge-postgres | grep sandbox
    fi
}

function store_instance_variables {
    echo "---Retrieving env variables---"
    echo "APP_SETTINGS=\"$(get_instance_metadata "APP_SETTINGS")\"" >> .env
    if [[ $(get_instance_metadata "environment") == "production" ]]; then
        echo "MRM_URL=\"$(get_instance_metadata "MRM_URL_PRODUCTION")\"" >> .env
        echo "MRM_API_URL=\"$(get_instance_metadata "MRM_API_URL_PRODUCTION")\"" >> .env
    elif [[ $(get_instance_metadata "environment") == "staging" ]]; then
        echo "MRM_URL=\"$(get_instance_metadata "MRM_URL_STAGING")\"" >> .env
        echo "MRM_API_URL=\"$(get_instance_metadata "MRM_API_URL_STAGING")\"" >> .env
		if [[ $(get_database) == '' ]] && [[ $(get_instance_metadata "environment") == "staging" ]]; then
			echo "Creating staging database..."
        	gcloud sql databases create staging --instance=converge-postgres
		elif [[ $(get_database) == '' ]] && [[ $(get_instance_metadata "environment") == "sandbox" ]]; then
			echo "Creating sandbox database..."
        	gcloud sql databases create sandbox --instance=converge-postgres
		fi
    elif [[ $(get_instance_metadata "environment") == "sandbox" ]]; then
        echo "MRM_URL=\"$(get_instance_metadata "MRM_URL_SANDBOX")\"" >> .env
        echo "MRM_API_URL=\"$(get_instance_metadata "MRM_API_URL_SANDBOX")\"" >> .env
    fi
    echo "ANDELA_LOGIN_URL=\"$(get_instance_metadata "ANDELA_LOGIN_URL")\"" >> .env
    echo "ANDELA_API_URL=\"$(get_instance_metadata "ANDELA_API_URL")\"" >> .env
    echo "MRM_PUSH_URL=\"$(get_instance_metadata "MRM_PUSH_URL")\"" >> .env
}

function create_repo_key {
  if [ ! -d $HOME/.ssh ]; then
    echo "---creating ssh directory---"
    sudo mkdir -p $HOME/.ssh
    sudo chmod 700 $HOME/.ssh
    echo "Directory Created>>>"
  fi
  echo "---Downloading Repo Key from Vault Server---"
  vault read -format="json" mrm/keys | jq -r .data.mrm_repo_private_key > $HOME/.ssh/id_rsa
  if [ ! "$(ssh-keygen -F github.com)" ]; then
    ssh-keyscan github.com >> $HOME/.ssh/known_hosts
  fi
  #Change permissions on key file to read only
  chmod 600 $HOME/.ssh/id_rsa
}
function clone_repo {
  echo "---cloning repo---"
  n=0
  EXIT_CODE=1
  until [ $n -ge 4 ]
  do
    [[ -d mrm_api ]] && EXIT_CODE=0 && break
    if [[ $(get_instance_metadata "environment") == "production" ]]; then
        git clone -b master git@github.com:andela/mrm_api.git
    elif [[ $(get_instance_metadata "environment") == "staging" ]]; then
        git clone -b develop git@github.com:andela/mrm_api.git
    elif [[ $(get_instance_metadata "environment") == "sandbox" ]]; then
        git clone -b develop git@github.com:andela/mrm_api.git
    fi

    if [ $? -eq 128 ]; then
      EXIT_CODE=128
      echo "Unable to clone Repo (Permission Denied)"
      break
    fi

    n=$[$n+1]
    sleep 15
  done
  [[ ! -d mrm_api ]] && $(exit-on-failure) && break
  echo ">>>Cloning Successful---"
}
function set_credentials_file {
  sudo mv /home/packer/credentials.json $HOME/mrm_api/credentials.json
}
function install_project_dependencies {
  echo "---Installing dependencies---"

  cd mrm_api
  pip install -r requirements.txt

}
function count_versions {
  echo $(find alembic/versions/*.py | wc -l)
}
function retrieve_secret_key {
  echo $(vault read -format="json" mrm/keys | jq -r .data.mrm_api_secret_key)
}
function setup_env_variables {
  echo "---Setting env variables---"

  if [ -s .env ]; then
    while read new_line || [[ -n $new_line ]]; do
      if ! grep -q $new_line /etc/supervisor/conf.d/mrm_api.conf; then
        printf "\t$new_line,\n" | sudo tee --append /etc/supervisor/conf.d/mrm_api.conf
      fi
    done <.env
  fi

  echo "---exporting env variables---"
  if ! grep -q DATABASE_URL /etc/supervisor/conf.d/mrm_api.conf; then
    printf "\tDATABASE_URL=\"$(database_url)\",\n" | sudo tee --append /etc/supervisor/conf.d/mrm_api.conf
    printf "\tDEV_DATABASE_URL=\"$(database_url)\",\n" | sudo tee --append /etc/supervisor/conf.d/mrm_api.conf
  fi
  if ! grep -q SECRET_KEY /etc/supervisor/conf.d/mrm_api.conf; then
    printf "\tSECRET_KEY=\"$(retrieve_secret_key)\"\n" | sudo tee --append /etc/supervisor/conf.d/mrm_api.conf
  fi
}
function run_migration {
  export $(cat /home/packer/mrm_api/.env | xargs)
  export DATABASE_URL="$(database_url)"
  export DEV_DATABASE_URL="$(database_url)"
  export SECRET_KEY="$(retrieve_secret_key)"
  echo "---Running db migrations---"
  /home/packer/venv/bin/alembic upgrade head
}
function run_application {
  sudo supervisorctl reread
  sudo supervisorctl update
  sudo service supervisor restart
  sudo supervisorctl start mrm_api
}
function use_venv {
  virtualenv --python=python3 venv
  source venv/bin/activate
}
function install_other_dependencies {
  pip install gunicorn
  pip install gevent
}
function exit-on-failure {
  sudo bash /home/packer/slack.sh "Failure" ${HOSTNAME} ${EXIT_CODE}
  exit $EXIT_CODE
}
function successful-startup {
  sudo bash /home/packer/slack.sh "Success" ${HOSTNAME}
}
function start-cron-job {
  . /home/packer/start-cron-job.sh
}
function main {
  login_vault
  create_repo_key
  use_venv
  clone_repo
  install_project_dependencies
  install_other_dependencies
  set_credentials_file
  store_instance_variables
  setup_env_variables
  run_migration
  run_application
  sudo filebeat setup --template -E output.logstash.enabled=false -E "output.elasticsearch.hosts=["$(ELASTICSEARCH_HOST):9200"]"
  sudo metricbeat setup
  sudo service metricbeat start
  sudo service filebeat start
  successful-startup
  start-cron-job
}
export HOSTNAME=$BACKEND_HOST
main "$@"
